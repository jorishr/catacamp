const express=require("express"),router=express.Router(),{campgroundService:campgroundService,userService:userService}=require("../services/index"),isProfileOwner=require("../middleware/isProfileOwner");router.get("/:id",async(e,r,s)=>{try{const i=await userService.findById(e.params.id),t=await campgroundService.findAllMatches("author.username",i.username);return r.render("users/show",{userData:i,campgroundData:t})}catch(e){return e.shouldRedirect=!0,s(e)}}),router.get("/:id/edit",isProfileOwner,async(e,r,s)=>{try{const i=await userService.findById(e.params.id);return r.render("users/edit",{userData:i})}catch(e){return e.shouldRedirect=!0,s(e)}}),router.put("/:id",isProfileOwner,async(e,r,s)=>{try{return await userService.findByIdAndUpdate(e.params.id,e.body.profile),e.flash("success","Profile updated successfully!"),r.redirect(`/user/${e.params.id}`)}catch(e){return e.shouldRedirect=!0,s(e)}}),router.delete("/:id",isProfileOwner,async(e,r,s)=>{try{const i=await userService.findById(e.params.id);return(await campgroundService.findAllMatches("author.id",i.id)).forEach(e=>{e.deleteOne()}),i.deleteOne(),e.flash("success","Sad to see you go! Your profile was deleted succesfully."),r.redirect("/campgrounds")}catch(e){return e.shouldRedirect=!0,s(e)}}),module.exports=router;