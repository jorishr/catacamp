const{sendConfEmail:sendConfEmail,sendTokenEmail:sendTokenEmail}=require("../helpers/mailgun/send"),express=require("express"),router=express.Router(),User=require("../models/user"),async=require("async"),crypto=require("crypto");router.get("/forgot",(e,r)=>{r.render("users/forgot")}),router.post("/forgot",(e,r,s)=>{async.waterfall([e=>{crypto.randomBytes(20,(r,s)=>{const o=s.toString("hex");e(r,o)})},(s,o)=>{User.findOne({email:e.body.email},(t,a)=>{t||!a?(e.flash("error","No matching user data found. Try again with different email."),r.redirect("/forgot")):(a.resetPasswordToken=s,a.resetPasswordExpires=Date.now()+36e5,a.save(e=>{o(e,s,a)}))})},(r,o,t)=>{sendTokenEmail(r,o,t,e,s)}],e=>e?(e.shouldRedirect=!0,s(e)):r.redirect("/campgrounds"))}),router.get("/reset/:token",(e,r)=>{User.findOne({resetPasswordToken:e.params.token,resetPasswordExpires:{$gt:Date.now()}},(s,o)=>{if(s||!o)return e.flash("error","Your password reset token is invalid or has expired."),r.redirect("/forgot");r.render("users/reset",{token:e.params.token})})}),router.post("/reset/:token",(e,r,s)=>{async.waterfall([o=>{User.findOne({resetPasswordToken:e.params.token,resetPasswordExpires:{$gt:Date.now()}},(t,a)=>t||!a?(e.flash("error","Password reset token is invalid or has expired."),r.redirect("back")):e.body.password!==e.body.confirm?(e.flash("error","Passwords do not match."),r.redirect("back")):void a.setPassword(e.body.password,r=>{a.resetPasswordToken=void 0,a.resetPasswordExpires=void 0,a.save(r=>{e.logIn(a,r=>{sendConfEmail(a,o,e,s)})})}))}],e=>{e&&(e.shouldRedirect=!0,s(e)),r.redirect("/campgrounds")})}),module.exports=router;